package com.lwam.lwam.contoller;


import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RestController;

import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

 

/*
@CrossOrigin(origins = "http://localhost:8081")
@RestController
@RequestMapping("/test")
public class TestController {

    //private final CountriesService countriesService;

    @Autowired
    public TestController() {
        
    }
    
    final Logger logger = LoggerFactory.getLogger(TestController.class);
    
    
    @RequestMapping(method = RequestMethod.GET, produces = "application/json")
    public String getAllCountries() {
    	logger.debug("Calling getAllCountries Controller Get by parameter...");
    	//List<Country> countries = new ArrayList<Country>(countriesService.findAll());

        return "Hello my friend";
    }

  
    
}

*/



import org.springframework.web.bind.annotation.ResponseBody;
/*
import com.lwam.lwam.model.Customer;
import com.lwam.lwam.model.Person;
import com.lwam.lwam.model.Trainee;
import com.lwam.lwam.repositories.CustomerRepository;
import com.lwam.lwam.repositories.PersonRepository;
import com.lwam.lwam.repositories.TraineeRepository;

*/


//@Controller    // This means that this class is a Controller
//@RequestMapping(path="/test") // This means URL's start with /demo (after Application path)
@RestController
public class TestController {
	//@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	/*
	@Autowired
	PersonRepository personRepository;
	@Autowired
	CustomerRepository customerRepository;
	
	@Autowired
	TraineeRepository traineeRepository;
	
	*/
	//@Autowired
    //public void setPersonRepository(PersonRepository personRepository) {
     //   this.personRepository = personRepository;
    //}

	//@GetMapping(path="/add") // Map ONLY GET Requests
//	public @ResponseBody String addNewUser (@RequestParam String name
	//		, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

	//	User n = new User();
//		n.setName(name);
//		n.setEmail(email);
//		userRepository.save(n);
//		return "Saved";
//	}

	Logger logger = LoggerFactory.getLogger(TestController.class);
	
	/*
	@GetMapping(value="/customer",  produces=MediaType.APPLICATION_JSON_VALUE)
	public List<Customer> getAll() {
		List<Customer> list = new ArrayList<>();

		return list;
	}
	
	@GetMapping(value="/persons",  produces=MediaType.APPLICATION_JSON_VALUE)
	public List<Person> getPersonAll() {
		List<Person> list = new ArrayList<>();
		Iterable<Person> persons = personRepository.findAll();
 
		persons.forEach(list::add);
		return list;
	}
	
	
	@GetMapping(value="/home",  produces=MediaType.APPLICATION_JSON_VALUE)
	public List<Trainee> getTraineeAll() {
		List<Trainee> list = new ArrayList<>();
		Iterable<Trainee> trainee = traineeRepository.findAll();
		logger.info("Home Home Hone1");
		
		trainee.forEach(list::add);
		return list;
	}
	
	
	@PostMapping(value="/posttrainee")
	public Trainee postCustomer(@RequestBody Trainee trainee) {
		logger.info("post trainee Sawa");
		Trainee traineeLoc  = new Trainee(trainee.getFirstName(), trainee.getLastName(), 
				        trainee.getMotherName(), trainee.getMotherFatherName(), 
						trainee.getZoba(), trainee.getSubzoba(), trainee.getMimihidar(),
						trainee.getVillage(), trainee.getZobaMebekol(),
						trainee.getSubzobaMebekol(), trainee.getMimihidarMebekol(),
						trainee.getVillageMebekol(), trainee.getDob(), trainee.getDor(),
						trainee.getBiher(), trainee.getReligion());
					
		traineeRepository.save(traineeLoc);
		return trainee;
	}
 
	
	@GetMapping(path="/persons1")
	public @ResponseBody Iterable<Person> getAllPersons() {
	
		List<Person> persons = new ArrayList<Person>();
		persons = (List<Person>) personRepository.findAll();
		logger.info("Yebio Mesfin 1");
		logger.info(null, persons);
		logger.info("Yebio Mesfin 6");
	
		return persons;
	}
	
	
	*/
}
